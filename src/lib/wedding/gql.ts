/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetGuests {\n  guests {\n    id\n    name\n    email\n    phone\n    created_at\n    updated_at\n  }\n}\n\nquery GetEvent($id: Int!) {\n  events_by_pk(id: $id) {\n    id\n    name\n    datetime\n    location\n    type\n    image\n    questionnaires {\n      id\n      title\n      description\n      image\n      event_id\n      questions {\n        id\n        title\n        type\n        hint\n        image\n        options {\n          id\n          title\n        }\n      }\n    }\n  }\n}\n\nquery SearchEventGuestsByName($args: search_guests_by_name_args!) {\n  search_guests_by_name(args: $args) {\n    id\n    name\n    email\n    phone\n    created_at\n    updated_at\n  }\n}\n\nquery GetEventQuestionnairesGuestAnswers($eventId: Int, $userId: Int!) {\n  questionnaire(where: {event_id: {_eq: $eventId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions {\n      id\n      title\n      type\n      hint\n      image\n      options {\n        id\n        title\n      }\n      answers(where: {user: {id: {_eq: $userId}}}) {\n        user_id\n        option_id\n      }\n      answers_aggregate(\n        where: {user_id: {_eq: $userId}, question: {questionnaire: {event_id: {_eq: $eventId}}}}\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}\n\nquery GetEventQuestionnaireUserAnswersById($questionnaireId: Int, $userId: Int!) {\n  questionnaire(where: {id: {_eq: $questionnaireId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions(order_by: {id: asc}) {\n      id\n      title\n      type\n      hint\n      image\n      options {\n        id\n        title\n      }\n      answers(where: {user_id: {_eq: $userId}}) {\n        id\n        user_id\n        option_id\n        updated_at\n        question_id\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}\n\nquery GetEventQuestionnaireGuestAnswersCount($eventId: Int!, $questionnaireId: Int!, $userId: Int!) {\n  answers_aggregate(\n    where: {user_id: {_eq: $userId}, question: {questionnaire_id: {_eq: $questionnaireId}, questionnaire: {event_id: {_eq: $eventId}}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEventsByUser($userId: Int!) {\n  events(where: {guests: {user_id: {_eq: $userId}}}) {\n    id\n    name\n    datetime\n    location\n    type\n    image\n    guests {\n      id\n    }\n    questionnaires {\n      id\n      title\n      description\n      image\n      event_id\n      questions {\n        id\n        title\n        type\n        hint\n        image\n        options {\n          id\n          title\n        }\n        answers(where: {user_id: {_eq: $userId}}) {\n          user_id\n          option_id\n        }\n      }\n    }\n  }\n}\n\nquery GetQuestionnaireRanking($args: get_questionnaire_ranking_args!) {\n  get_questionnaire_ranking(args: $args) {\n    id\n    name\n    email\n    phone\n    points\n  }\n}\n\nmutation InsertAnswer($questionId: Int!, $optionId: Int!, $userId: Int!) {\n  insert_answers_one(\n    object: {question_id: $questionId, option_id: $optionId, user_id: $userId}\n  ) {\n    question_id\n    option_id\n    user_id\n  }\n}\n\nmutation UpdateAnswer($id: Int!, $optionId: Int!) {\n  update_answers_by_pk(pk_columns: {id: $id}, _set: {option_id: $optionId}) {\n    question_id\n    option_id\n    user_id\n  }\n}\n\nquery GetGuestsByEvents($eventId: Int!) {\n  guests(where: {event_id: {_eq: $eventId}}) {\n    id\n    name\n    status\n    email\n    phone\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nquery GetGuestById($id: Int!) {\n  guests(where: {id: {_eq: $id}}) {\n    id\n    name\n    status\n    email\n    phone\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation InsertGuest($eventId: Int!, $name: String!, $email: String, $phone: String) {\n  insert_guests_one(\n    object: {event_id: $eventId, name: $name, email: $email, phone: $phone}\n  ) {\n    id\n    name\n    email\n    phone\n  }\n}\n\nmutation UpdateGuest($id: Int!, $name: String!, $email: String, $phone: String) {\n  update_guests_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, email: $email, phone: $phone}\n  ) {\n    id\n    name\n    email\n    phone\n  }\n}\n\nmutation DeleteGuest($id: Int!) {\n  delete_guests_by_pk(id: $id) {\n    id\n  }\n}\n\nquery GetEventQuestionnaireUsersAnswers($questionnaireId: Int) {\n  questionnaire(where: {id: {_eq: $questionnaireId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions(order_by: {id: asc}) {\n      id\n      title\n      type\n      hint\n      image\n      answers {\n        id\n        user_id\n        user {\n          id\n          name\n        }\n        option_id\n        updated_at\n        question_id\n      }\n      options {\n        id\n        title\n        answers {\n          id\n          user_id\n          user {\n            id\n            name\n          }\n          option_id\n          updated_at\n          question_id\n        }\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}": types.GetGuestsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetGuests {\n  guests {\n    id\n    name\n    email\n    phone\n    created_at\n    updated_at\n  }\n}\n\nquery GetEvent($id: Int!) {\n  events_by_pk(id: $id) {\n    id\n    name\n    datetime\n    location\n    type\n    image\n    questionnaires {\n      id\n      title\n      description\n      image\n      event_id\n      questions {\n        id\n        title\n        type\n        hint\n        image\n        options {\n          id\n          title\n        }\n      }\n    }\n  }\n}\n\nquery SearchEventGuestsByName($args: search_guests_by_name_args!) {\n  search_guests_by_name(args: $args) {\n    id\n    name\n    email\n    phone\n    created_at\n    updated_at\n  }\n}\n\nquery GetEventQuestionnairesGuestAnswers($eventId: Int, $userId: Int!) {\n  questionnaire(where: {event_id: {_eq: $eventId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions {\n      id\n      title\n      type\n      hint\n      image\n      options {\n        id\n        title\n      }\n      answers(where: {user: {id: {_eq: $userId}}}) {\n        user_id\n        option_id\n      }\n      answers_aggregate(\n        where: {user_id: {_eq: $userId}, question: {questionnaire: {event_id: {_eq: $eventId}}}}\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}\n\nquery GetEventQuestionnaireUserAnswersById($questionnaireId: Int, $userId: Int!) {\n  questionnaire(where: {id: {_eq: $questionnaireId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions(order_by: {id: asc}) {\n      id\n      title\n      type\n      hint\n      image\n      options {\n        id\n        title\n      }\n      answers(where: {user_id: {_eq: $userId}}) {\n        id\n        user_id\n        option_id\n        updated_at\n        question_id\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}\n\nquery GetEventQuestionnaireGuestAnswersCount($eventId: Int!, $questionnaireId: Int!, $userId: Int!) {\n  answers_aggregate(\n    where: {user_id: {_eq: $userId}, question: {questionnaire_id: {_eq: $questionnaireId}, questionnaire: {event_id: {_eq: $eventId}}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEventsByUser($userId: Int!) {\n  events(where: {guests: {user_id: {_eq: $userId}}}) {\n    id\n    name\n    datetime\n    location\n    type\n    image\n    guests {\n      id\n    }\n    questionnaires {\n      id\n      title\n      description\n      image\n      event_id\n      questions {\n        id\n        title\n        type\n        hint\n        image\n        options {\n          id\n          title\n        }\n        answers(where: {user_id: {_eq: $userId}}) {\n          user_id\n          option_id\n        }\n      }\n    }\n  }\n}\n\nquery GetQuestionnaireRanking($args: get_questionnaire_ranking_args!) {\n  get_questionnaire_ranking(args: $args) {\n    id\n    name\n    email\n    phone\n    points\n  }\n}\n\nmutation InsertAnswer($questionId: Int!, $optionId: Int!, $userId: Int!) {\n  insert_answers_one(\n    object: {question_id: $questionId, option_id: $optionId, user_id: $userId}\n  ) {\n    question_id\n    option_id\n    user_id\n  }\n}\n\nmutation UpdateAnswer($id: Int!, $optionId: Int!) {\n  update_answers_by_pk(pk_columns: {id: $id}, _set: {option_id: $optionId}) {\n    question_id\n    option_id\n    user_id\n  }\n}\n\nquery GetGuestsByEvents($eventId: Int!) {\n  guests(where: {event_id: {_eq: $eventId}}) {\n    id\n    name\n    status\n    email\n    phone\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nquery GetGuestById($id: Int!) {\n  guests(where: {id: {_eq: $id}}) {\n    id\n    name\n    status\n    email\n    phone\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation InsertGuest($eventId: Int!, $name: String!, $email: String, $phone: String) {\n  insert_guests_one(\n    object: {event_id: $eventId, name: $name, email: $email, phone: $phone}\n  ) {\n    id\n    name\n    email\n    phone\n  }\n}\n\nmutation UpdateGuest($id: Int!, $name: String!, $email: String, $phone: String) {\n  update_guests_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, email: $email, phone: $phone}\n  ) {\n    id\n    name\n    email\n    phone\n  }\n}\n\nmutation DeleteGuest($id: Int!) {\n  delete_guests_by_pk(id: $id) {\n    id\n  }\n}\n\nquery GetEventQuestionnaireUsersAnswers($questionnaireId: Int) {\n  questionnaire(where: {id: {_eq: $questionnaireId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions(order_by: {id: asc}) {\n      id\n      title\n      type\n      hint\n      image\n      answers {\n        id\n        user_id\n        user {\n          id\n          name\n        }\n        option_id\n        updated_at\n        question_id\n      }\n      options {\n        id\n        title\n        answers {\n          id\n          user_id\n          user {\n            id\n            name\n          }\n          option_id\n          updated_at\n          question_id\n        }\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}"): (typeof documents)["query GetGuests {\n  guests {\n    id\n    name\n    email\n    phone\n    created_at\n    updated_at\n  }\n}\n\nquery GetEvent($id: Int!) {\n  events_by_pk(id: $id) {\n    id\n    name\n    datetime\n    location\n    type\n    image\n    questionnaires {\n      id\n      title\n      description\n      image\n      event_id\n      questions {\n        id\n        title\n        type\n        hint\n        image\n        options {\n          id\n          title\n        }\n      }\n    }\n  }\n}\n\nquery SearchEventGuestsByName($args: search_guests_by_name_args!) {\n  search_guests_by_name(args: $args) {\n    id\n    name\n    email\n    phone\n    created_at\n    updated_at\n  }\n}\n\nquery GetEventQuestionnairesGuestAnswers($eventId: Int, $userId: Int!) {\n  questionnaire(where: {event_id: {_eq: $eventId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions {\n      id\n      title\n      type\n      hint\n      image\n      options {\n        id\n        title\n      }\n      answers(where: {user: {id: {_eq: $userId}}}) {\n        user_id\n        option_id\n      }\n      answers_aggregate(\n        where: {user_id: {_eq: $userId}, question: {questionnaire: {event_id: {_eq: $eventId}}}}\n      ) {\n        aggregate {\n          count\n        }\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}\n\nquery GetEventQuestionnaireUserAnswersById($questionnaireId: Int, $userId: Int!) {\n  questionnaire(where: {id: {_eq: $questionnaireId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions(order_by: {id: asc}) {\n      id\n      title\n      type\n      hint\n      image\n      options {\n        id\n        title\n      }\n      answers(where: {user_id: {_eq: $userId}}) {\n        id\n        user_id\n        option_id\n        updated_at\n        question_id\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}\n\nquery GetEventQuestionnaireGuestAnswersCount($eventId: Int!, $questionnaireId: Int!, $userId: Int!) {\n  answers_aggregate(\n    where: {user_id: {_eq: $userId}, question: {questionnaire_id: {_eq: $questionnaireId}, questionnaire: {event_id: {_eq: $eventId}}}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n\nquery GetEventsByUser($userId: Int!) {\n  events(where: {guests: {user_id: {_eq: $userId}}}) {\n    id\n    name\n    datetime\n    location\n    type\n    image\n    guests {\n      id\n    }\n    questionnaires {\n      id\n      title\n      description\n      image\n      event_id\n      questions {\n        id\n        title\n        type\n        hint\n        image\n        options {\n          id\n          title\n        }\n        answers(where: {user_id: {_eq: $userId}}) {\n          user_id\n          option_id\n        }\n      }\n    }\n  }\n}\n\nquery GetQuestionnaireRanking($args: get_questionnaire_ranking_args!) {\n  get_questionnaire_ranking(args: $args) {\n    id\n    name\n    email\n    phone\n    points\n  }\n}\n\nmutation InsertAnswer($questionId: Int!, $optionId: Int!, $userId: Int!) {\n  insert_answers_one(\n    object: {question_id: $questionId, option_id: $optionId, user_id: $userId}\n  ) {\n    question_id\n    option_id\n    user_id\n  }\n}\n\nmutation UpdateAnswer($id: Int!, $optionId: Int!) {\n  update_answers_by_pk(pk_columns: {id: $id}, _set: {option_id: $optionId}) {\n    question_id\n    option_id\n    user_id\n  }\n}\n\nquery GetGuestsByEvents($eventId: Int!) {\n  guests(where: {event_id: {_eq: $eventId}}) {\n    id\n    name\n    status\n    email\n    phone\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nquery GetGuestById($id: Int!) {\n  guests(where: {id: {_eq: $id}}) {\n    id\n    name\n    status\n    email\n    phone\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation InsertGuest($eventId: Int!, $name: String!, $email: String, $phone: String) {\n  insert_guests_one(\n    object: {event_id: $eventId, name: $name, email: $email, phone: $phone}\n  ) {\n    id\n    name\n    email\n    phone\n  }\n}\n\nmutation UpdateGuest($id: Int!, $name: String!, $email: String, $phone: String) {\n  update_guests_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, email: $email, phone: $phone}\n  ) {\n    id\n    name\n    email\n    phone\n  }\n}\n\nmutation DeleteGuest($id: Int!) {\n  delete_guests_by_pk(id: $id) {\n    id\n  }\n}\n\nquery GetEventQuestionnaireUsersAnswers($questionnaireId: Int) {\n  questionnaire(where: {id: {_eq: $questionnaireId}}) {\n    id\n    title\n    description\n    image\n    event_id\n    event {\n      name\n    }\n    questions(order_by: {id: asc}) {\n      id\n      title\n      type\n      hint\n      image\n      answers {\n        id\n        user_id\n        user {\n          id\n          name\n        }\n        option_id\n        updated_at\n        question_id\n      }\n      options {\n        id\n        title\n        answers {\n          id\n          user_id\n          user {\n            id\n            name\n          }\n          option_id\n          updated_at\n          question_id\n        }\n      }\n    }\n    prizes {\n      name\n      image\n      ranking\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;